#include <iostream>
#include <list>
#include <map>
#include <climits>
#include <bits/stdc++.h>

using namespace std;

class Graph {
private:
    int V;
    map<int, list<pair<int, int> > > adj;

public:
    Graph(int V);
    void addEdge(int u, int v, int w);
    void primMST(int start);
};

Graph::Graph(int V) {
    this->V = V;
}

void Graph::addEdge(int u, int v, int w) {
    adj[u].push_back(make_pair(v, w));
    adj[v].push_back(make_pair(u, w));
}

void Graph::primMST(int start) {
    map<int, int> key;
    map<int, int> parent;
    map<int, bool> inMST;

    for (int i = 0; i < V; i++) {
        key[i] = INT_MAX;
        parent[i] = -1;
        inMST[i] = false;
    }

    key[start] = 0;
    parent[start] = -1;

    for (int count = 0; count < V - 1; count++) {
        int minVertex = -1;
        int minKey = INT_MAX;

        for (int v = 0; v < V; v++) {
            if (!inMST[v] && key[v] < minKey) {
                minKey = key[v];
                minVertex = v;
            }
        }

        inMST[minVertex] = true;

        for (auto neighbor : adj[minVertex]) {
            int v = neighbor.first;
            int weight = neighbor.second;
            if (!inMST[v] && weight < key[v]) {
                parent[v] = minVertex;
                key[v] = weight;
            }
        }
    }

    // Print the MST
    cout << "Edge \tWeight\n";
    for (int i = 1; i < V; i++)
        cout << parent[i] << " - " << i << "\t" << key[i] << endl;
}

int main() {
    int V = 5;
    Graph g(V);

    g.addEdge(0, 1, 2);
    g.addEdge(0, 3, 6);
    g.addEdge(1, 2, 3);
    g.addEdge(1, 3, 8);
    g.addEdge(1, 4, 5);
    g.addEdge(2, 4, 7);
    g.addEdge(3, 4, 9);

    g.primMST(0);
    return 0;
}
